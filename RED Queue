import random
class REDQueue:
    def _init_(self, min_thresh, max_thresh, max_queue_size, max_drop_prob):
        self.min_thresh = min_thresh            # Minimum queue threshold
        self.max_thresh = max_thresh            # Maximum queue threshold
        self.max_queue_size = max_queue_size    # Maximum queue capacity
        self.max_drop_prob = max_drop_prob      # Max probability for dropping a packet
        self.queue = []                         # Initialize an empty queue
    
    def calculate_drop_probability(self, queue_length):
        # Linear drop probability between min_thresh and max_thresh
        if queue_length >= self.min_thresh and queue_length < self.max_thresh:
            return self.max_drop_prob * (queue_length - self.min_thresh) / (self.max_thresh - self.min_thresh)
        elif queue_length >= self.max_thresh:
            return 1  # Drop probability is 1 if queue size is above max threshold
        return 0  # No drop if below min threshold

    def add_packet(self, packet):
        queue_length = len(self.queue)

        # Calculate drop probability
        drop_prob = self.calculate_drop_probability(queue_length)

        # Decide to drop or enqueue
        if random.random() < drop_prob:
            print(f"Packet {packet} dropped due to congestion.")
        else:
            if queue_length < self.max_queue_size:
                self.queue.append(packet)
                print(f"Packet {packet} added to queue. Queue length: {len(self.queue)}")
            else:
                print(f"Packet {packet} dropped: queue is full.")

# Get user input for RED parameters
min_thresh = int(input("Enter minimum queue threshold (min_thresh): "))
max_thresh = int(input("Enter maximum queue threshold (max_thresh): "))
max_queue_size = int(input("Enter maximum queue capacity (max_queue_size): "))
max_drop_prob = float(input("Enter maximum drop probability (max_drop_prob, between 0 and 1): "))
packet_count = int(input("Enter the number of packets to simulate: "))

# Create RED queue with user-defined parameters
red_queue = REDQueue(min_thresh, max_thresh, max_queue_size, max_drop_prob)

# Simulate packet arrival
for i in range(1, packet_count + 1):
    red_queue.add_packet(f"Packet_{i}")
