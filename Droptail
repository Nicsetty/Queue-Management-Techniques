class DropTailQueue:
    def __init__(self, max_size):
        """
        Initialize the queue with a maximum size.
        """
        self.queue = []
        self.max_size = max_size
        self.packet_drops = 0

    def enqueue(self, packet):
        """
        Add a packet to the queue.
        If the queue is full, drop the packet.
        """
        if len(self.queue) < self.max_size:
            self.queue.append(packet)
            print(f"Packet {packet} added to the queue. Current size: {len(self.queue)}")
        else:
            self.packet_drops += 1
            print(f"Packet {packet} dropped! Queue is full.")

    def dequeue(self):
        """
        Remove a packet from the front of the queue.
        """
        if self.queue:
            packet = self.queue.pop(0)
            print(f"Packet {packet} dequeued. Current size: {len(self.queue)}")
            return packet
        else:
            print("Queue is empty. No packet to dequeue.")
            return None

    def get_drops(self):
        """
        Return the number of dropped packets.
        """
        return self.packet_drops

    def get_queue(self):
        """
        Return the current state of the queue.
        """
        return self.queue


# Main function to simulate DropTail queue
def simulate_droptail():
    max_queue_size = int(input("Enter the maximum queue size: "))
    num_packets = int(input("Enter the total number of packets to process: "))
    
    queue = DropTailQueue(max_size=max_queue_size)

    for i in range(1, num_packets + 1):
        action = input(f"Process packet {i}? (enqueue/dequeue/stop): ").strip().lower()
        if action == "enqueue":
            queue.enqueue(f"Packet-{i}")
        elif action == "dequeue":
            queue.dequeue()
        elif action == "stop":
            print("Stopping simulation.")
            break
        else:
            print("Invalid action. Please enter 'enqueue', 'dequeue', or 'stop'.")
    
    print("\nSimulation completed.")
    print(f"Final Queue: {queue.get_queue()}")
    print(f"Total Packets Dropped: {queue.get_drops()}")

# Run the simulation
if __name__ == "__main__":
    simulate_droptail()
